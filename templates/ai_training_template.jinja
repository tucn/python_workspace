import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from foundation.foundation import Foundation
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

class AITraining(Foundation):
    def run(self):
        dataset_path = "dataset.csv"
        target_column = "target"

        # Load and preprocess data
        df = self._load_dataset(dataset_path)
        X, y = self._preprocess_data(df, target_column)

        # Split data
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Train and evaluate model
        model = self._train_model(X_train, y_train)
        accuracy = self._evaluate_model(model, X_test, y_test)

        self.logger.info(f"Model Accuracy: {accuracy:.2f}")

    def _load_dataset(self, file_path):
        self.logger.info(f"Loading dataset from {file_path}")
        return pd.read_csv(file_path)

    def _preprocess_data(self, df, target_column):
        self.logger.info(f"Preprocessing data with target column: {target_column}")
        X = df.drop(columns=[target_column])
        y = df[target_column]
        return X, y

    def _train_model(self, X_train, y_train):
        self.logger.info("Training model...")
        model = RandomForestClassifier(random_state=42)
        model.fit(X_train, y_train)
        return model

    def _evaluate_model(self, model, X_test, y_test):
        self.logger.info("Evaluating model...")
        predictions = model.predict(X_test)
        return accuracy_score(y_test, predictions)

if __name__ == "__main__":
    service = AITraining(service_name="{{ project_name }}")
    service.serve(service.run)
